library(p_load)
library(pacman)
p_load(reticulate)
reticulate::repl_python()
a = 2
n
quit
Sys.which("python")
Sys.which("python")
use_python("C:\Users\Lenovo\miniconda3")
use_python("C:/Users/Lenovo/miniconda3")
Sys.which("python")
print(conda_list())
use_virtualenv("methods3")
reticulate::repl_python()
a = 2
# a <- 2 # results in a syntax error
## already assigned variables can be reassigned with basic arithmetic operations
a += 2
a += 2
a += 2
print(a)
a = 2
# a <- 2 # results in a syntax error
## already assigned variables can be reassigned with basic arithmetic operations
a += 2
print(a)
a -= 1
print(a)
a *= 4
print(a)
a //= 2 # integer division
print(a)
a /= 2 # float  (numeric from R) division
print(a)
a **= 3 # exponentiation
print(a)
a_list = [1, 2] # initiate a list (the square brackets) with the integers 1 and 2
b = a_list ## b now points to a_list, not to a new list with the integers 1 and 2
a_list.append(3) # add a new value to the end of the list
print(a_list)
print(b) # make sure you understand this
print(a_list[0]) # zero-indexing
print(a_list[1])
new_list = [0, 1, 2, 3, 4, 5]
print(new_list[0:3])  # slicing
for index in range(0, 5): # indentation (use tabulation) controls scope of control variables
#(no brackets necessary),
if index == 0: # remember the colon
value = 0
else:
value += index
print(value)
this_is_true = True # logical values
this_is_false = False
for index in range(0, 5): # indentation (use tabulation) controls scope of control variables
#(no brackets necessary),
if index == 0: # remember the colon
value = 0
else:
value += index
print(value)
reticulate::repl_python()
2
reticulate::repl_python()
a = 2
reticulate::repl_python()
a += 2
reticulate::repl_python()
print(a)
reticulate::repl_python()
a -= 1
reticulate::repl_python()
print(a)
library(pacman)
p_load(reticulate)
use_python("C:/Users/Lenovo/miniconda3")
print(conda_list())
use_virtualenv("methods3")
reticulate::repl_python()
a = 2
reticulate::repl_python()
# a <- 2 # results in a syntax error
reticulate::repl_python()
## already assigned variables can be reassigned with basic arithmetic operations
print(conda_list())
use_python("C:/Users/Lenovo/miniconda3/python")
print(conda_list())
use_virtualenv("methods3")
reticulate::repl_python()
## assignment is done and only done with "=" (no arrows)
reticulate::repl_python()
a = 2
library(pacman)
p_load(reticulate)
use_python("C:/Users/Lenovo/miniconda3/python")
print(conda_list())
use_virtualenv("methods3")
reticulate::repl_python()
a = 2
Sys.which("python")
library(pacman)
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python")
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/")
Sys.which("python")
library(pacman)
p_load(reticulate)
Sys.which("python")
library(pacman)
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/")
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
Sys.which("python")
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
library(pacman)
p_load(reticulate)
Sys.which("python")
library(pacman)
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
library(pacman)
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
use_virtualenv("methods3")
reticulate::repl_python()
a = 2
reticulate::repl_python()
# a <- 2 # results in a syntax error
reticulate::repl_python()
## already assigned variables can be reassigned with basic arithmetic operations
reticulate::repl_python()
a += 2
reticulate::repl_python()
print(a)
use_virtualenv("methods3")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
use_virtualenv("methods3")
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
Sys.which("python")
use_python("C:\Users\Lenovo\miniconda3\python.exe")
print(conda_list())
use_python("C:\Users\Lenovo\miniconda3\python.exe")
print(conda_list())
use_python("C:/Users/Lenovo/miniconda3/python.exe")
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
use_virtualenv("methods3")
reticulate::repl_python()
## assignment is done and only done with "=" (no arrows)
reticulate::repl_python()
a = 2
reticulate::repl_python()
# a <- 2 # results in a syntax error
reticulate::repl_python()
## already assigned variables can be reassigned with basic arithmetic operations
reticulate::repl_python()
a += 2
reticulate::repl_python()
print(a)
reticulate::repl_python()
a = 2
use_python("C://Users//Lenovo//miniconda3//python.exe")
print(conda_list())
use_virtualenv("methods3")
library(pacman)
p_load(reticulate)
Sys.which("python")
use_python("C://Users//Lenovo//miniconda3//python.exe")
print(conda_list())
use_virtualenv("methods3")
## Good to know about _Python_ (in no particular order)
reticulate::repl_python()
```{python}
reticulate::repl_python()
## assignment is done and only done with "=" (no arrows)
use_virtualenv("C:/Users/Lenovo/miniconda3/envs/methods3")
reticulate::repl_python()
## assignment is done and only done with "=" (no arrows)
reticulate::repl_python()
a = 2
library(pacman)
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
use_virtualenv("C:/Users/Lenovo/miniconda3/envs/methods3")
reticulate::repl_python()
a = 2
use_condaenv()("C:/Users/Lenovo/miniconda3/envs/methods3")
use_condaenv("C:/Users/Lenovo/miniconda3/envs/methods3")
library(pacman)
p_load(reticulate)
Sys.which("python")
use_python("C:/Users/Lenovo/miniconda3/python.exe")
print(conda_list())
use_condaenv("C:/Users/Lenovo/miniconda3/envs/methods3")
reticulate::repl_python()
## assignment is done and only done with "=" (no arrows)
reticulate::repl_python()
a = 2
Sys.which("python")
py_config()
Sys.which("python")
library(pacman)
p_load(reticulate)
use_python("C:/Users/Lenovo/miniconda3/python.exe")
Sys.which("python")
print(conda_list())
use_python("C:/Users/Lenovo/miniconda3/python", required = T)
print(conda_list())
use_python("C:/Users/Lenovo/miniconda3/python", required = T)
use_python("C:/Users/Lenovo/miniconda3/python", required = T)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/Lenovo/miniconda3/python")
library(pacman)
p_load(reticulate)
use_python("C:/Users/Lenovo/miniconda3/python", required = T)
print(conda_list())
Sys.setenv(RETICULATE_PYTHON = "C:/Users/Lenovo/miniconda3/python")
library(pacman)
p_load(reticulate)
use_python("C:/Users/Lenovo/miniconda3/python", required = T)
print(conda_list())
Sys.path("python")
library(pacman)
p_load(reticulate)
library(pacman)
p_load(reticulate)
reticulate::repl_python()
a = 2
reticulate::repl_python()
# a <- 2 # results in a syntax error
reticulate::repl_python()
## already assigned variables can be reassigned with basic arithmetic operations
reticulate::repl_python()
a += 2
reticulate::repl_python()
print(a)
reticulate::repl_python()
a = 2
reticulate::repl_python()
# a <- 2 # results in a syntax error
reticulate::repl_python()
a = 2
reticulate::repl_python()
a += 2
reticulate::repl_python()
a = 2
reticulate::repl_python()
a = 2
reticulate::repl_python()
a = 2
library(pacman)
p_load(reticulate)
reticulate::repl_python()
a = 2
reticulate::repl_python()
from scipy.stats import f
X3 = np.ones(shape=len(y))
reticulate::repl_python()
beta_hat3 = 1 / (X3.T @ X3) * X3.T @ y
library(reticulate)
print(conda_list())
reticulate::repl_python()
a = 2
reticulate::repl_python()
a += 2
