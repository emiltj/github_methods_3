reticulate::repl_python()
class LinearRegression:
def __init__(self):
pass
def fit(self, X, y):
self.coefs_ = np.linalg.inv(X.T @ X) @ X.T @ y
def predict(self, x):
y_hat = self.coefs_[0] + self.coefs_[1] * x
return y_hat
reticulate::repl_python()
class LinearRegression:
def __init__(self):
pass
def fit(self, X, y):
self.coefs_ = np.linalg.inv(X.T @ X) @ X.T @ y
def predict(self, x):
y_hat = self.coefs_[0] + self.coefs_[1] * x
return y_hat
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0, 6.1, 0.1)
y_true = x**2
noise = np.random.normal(scale=5, size=len(y_true))
y_noise = y_true + noise
X = np.zeros(shape=(len(x), 2))
X[:, 0] = x ** 0
X[:, 1] = x ** 1
plt.figure()
plt.plot(x, y_noise, "o")
plt.plot(x, y_true)
plt.legend(['noisy data', "true relationship"])
plt.show()
regressor = LinearRegression() # class object
regressor.fit(X, y_true) # class module
regressor.coefs_ # class feature ( _ indicates it has been learned)
y_hat = regressor.predict(x) # class module
y_hat
plt.figure()
plt.plot(x, y_noise, "o")
plt.plot(x, y_true, "g-")
plt.plot(x, y_hat, "r-")
plt.legend(['noisy data', "true relationship", "class() linear fit"])
plt.show()
reticulate::repl_python()
class LinearRegression:
def __init__(self):
pass
def fit(self, X, y):
self.coefs_ = np.linalg.inv(X.T @ X) @ X.T @ y
def predict(self, x):
y_hat = self.coefs_[0] + self.coefs_[1] * x
return y_hat
quit
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0, 6.1, 0.1)
y_true = x**2
noise = np.random.normal(scale=5, size=len(y_true))
y_noise = y_true + noise
X = np.zeros(shape=(len(x), 2))
X[:, 0] = x ** 0
X[:, 1] = x ** 1
plt.figure()
plt.plot(x, y_noise, "o")
plt.plot(x, y_true)
plt.legend(['noisy data', "true relationship"])
plt.show()
regressor = LinearRegression() # class object
regressor.fit(X, y_true) # class module
regressor.coefs_ # class feature ( _ indicates it has been learned)
y_hat = regressor.predict(x) # class module
y_hat
plt.figure()
plt.plot(x, y_noise, "o")
plt.plot(x, y_true, "g-")
plt.plot(x, y_hat, "r-")
plt.legend(['noisy data', "true relationship", "class() linear fit"])
plt.show()
